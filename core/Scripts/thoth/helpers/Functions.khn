function ClassLevelLessThan(class, level)
    return ConditionResult(context.Source.GetClassLevel(class) < level)
end

function ClassLevelEqual(class, level)
    return ConditionResult(context.Source.GetClassLevel(class) == level)
end

function ClassLevelBetween(class, levelMin, levelMax)
    level = context.Source.GetClassLevel(class)
    return ConditionResult(level >= levelMin and level <= levelMax)
end

function isSlowerMovementRace()
    return HasPassive('SlowerRace',context.Source)
end

function isFasterMovementRace()
    return HasPassive('FleetOfFoot',context.Source)
end

function isNormalMovementRace()
    return not isSlowerMovementRace() and not isFasterMovementRace()
end

function WildShapeSaveDC(base)
    base = base or 9
    return base + context.Source.ProficiencyBonus
end

function MonkLevelHigherOrEqualThan(level)
    local entity = context.Source
    local error = 'RequireMonkLevel5'
    if (level == 9) then
        error = 'RequireMonkLevel9'
    end
    return ConditionResult(entity.GetClassLevel('Monk') >= level, {ConditionError(error)}, {ConditionError(error)})
end

function WisdomSaveDC()
    return 8 + context.Source.ProficiencyBonus + GetModifier(context.Source.Wisdom)
end

function DistanceToTargetBetween(min, max)
    return ConditionResult(DistanceToTarget() >= min and DistanceToTarget() <= max)
end

function DistanceToTargetLesserOrEqualThan(value)
    return ConditionResult(DistanceToTarget() <= value)
end

function StrengthModifier(value, entity)
    entity = entity or context.Source
    return ConditionResult(GetModifier(entity.Strength) == value)
end

function DexterityModifier(value, entity)
    entity = entity or context.Source
    return ConditionResult(GetModifier(entity.Dexterity) == value)
end

function WisdomModifier(value, entity)
    entity = entity or context.Source
    return ConditionResult(GetModifier(entity.Wisdom) == value)
end

function CharismaModifier(value, entity)
    entity = entity or context.Source
    return ConditionResult(GetModifier(entity.Charisma) == value)
end

function NotHasActiveAstralKnowledge(entity)
    local entity = entity or context.Source
    local result = HasStatus('ASTRAL_KNOWLEDGE_ACROBATICS', entity) | HasStatus('ASTRAL_KNOWLEDGE_ANIMALHANDLING', entity) | HasStatus('ASTRAL_KNOWLEDGE_ATHLETICS', entity) | HasStatus('ASTRAL_KNOWLEDGE_ARCANA', entity) | HasStatus('ASTRAL_KNOWLEDGE_DECEPTION', entity) | HasStatus('ASTRAL_KNOWLEDGE_HISTORY', entity) | HasStatus('ASTRAL_KNOWLEDGE_INSIGHT', entity) | HasStatus('ASTRAL_KNOWLEDGE_INTIMIDATION', entity) | HasStatus('ASTRAL_KNOWLEDGE_INVESTIGATION', entity) | HasStatus('ASTRAL_KNOWLEDGE_MEDICINE', entity) | HasStatus('ASTRAL_KNOWLEDGE_NATURE', entity) | HasStatus('ASTRAL_KNOWLEDGE_PERCEPTION', entity) | HasStatus('ASTRAL_KNOWLEDGE_PERFORMANCE', entity) | HasStatus('ASTRAL_KNOWLEDGE_PERSUASION', entity) | HasStatus('ASTRAL_KNOWLEDGE_RELIGION', entity) | HasStatus('ASTRAL_KNOWLEDGE_SLEIGHTOFHAND', entity) | HasStatus('ASTRAL_KNOWLEDGE_STEALTH', entity) | HasStatus('ASTRAL_KNOWLEDGE_SURVIVAL', entity)
    return ConditionResult(not result.Result, {ConditionError("UnavailableUntilRest")}, {ConditionError("UnavailableUntilRest")})
end

function HasProficiencyIn(skill)
    local ability = ''
    local skillValue = 0
    if (skill == 'Athletics') then
        ability = context.Source.Strength
        skillValue = context.Source.Athletics
    end
    if (skill == 'Acrobatics') then
        ability = context.Source.Dexterity
        skillValue = context.Source.Acrobatics
    end
    if (skill == 'SleightOfHand') then
        ability = context.Source.Dexterity
        skillValue = context.Source.SleightOfHand
    end
    if (skill == 'Stealth') then
        ability = context.Source.Dexterity
        skillValue = context.Source.Stealth
    end
    if (skill == 'Arcana') then
        ability = context.Source.Intelligence
        skillValue = context.Source.Arcana
    end
    if (skill == 'History') then
        ability = context.Source.Intelligence
        skillValue = context.Source.History
    end
    if (skill == 'Investigation') then
        ability = context.Source.Intelligence
        skillValue = context.Source.Investigation
    end
    if (skill == 'Nature') then
        ability = context.Source.Intelligence
        skillValue = context.Source.Nature
    end
    if (skill == 'Religion') then
        ability = context.Source.Intelligence
        skillValue = context.Source.Religion
    end
    if (skill == 'Deception') then
        ability = context.Source.Charisma
        skillValue = context.Source.Deception
    end
    if (skill == 'Intimidation') then
        ability = context.Source.Charisma
        skillValue = context.Source.Intimidation
    end
    if (skill == 'Performance') then
        ability = context.Source.Charisma
        skillValue = context.Source.Performance
    end
    if (skill == 'Persuasion') then
        ability = context.Source.Charisma
        skillValue = context.Source.Persuasion
    end
    if (skill == 'AnimalHandling') then
        ability = context.Source.Wisdom
        skillValue = context.Source.AnimalHandling
    end
    if (skill == 'Insight') then
        ability = context.Source.Wisdom
        skillValue = context.Source.Insight
    end
    if (skill == 'Medicine') then
        ability = context.Source.Wisdom
        skillValue = context.Source.Medicine
    end
    if (skill == 'Perception') then
        ability = context.Source.Wisdom
        skillValue = context.Source.Perception
    end
    if (skill == 'Survival') then
        ability = context.Source.Wisdom
        skillValue = context.Source.Survival
    end
    local modifier = GetModifier(ability)
    local value = skillValue - modifier
    return ConditionResult(value > 0)
end
